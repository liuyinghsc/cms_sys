
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
        classpath(group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: "4.0.3")
        classpath(group: 'mysql', name: 'mysql-connector-java', version: "5.1.41")
    }
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
apply plugin: 'application'
mainClassName = 'com.cms.CmsApplication'
apply plugin: "jacoco"
apply plugin: 'org.flywaydb.flyway'


//配置自动化测试
sourceSets {

    apiTest {
        resources {
            srcDirs.add(file("src/apiTest/resources"))
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }

    e2eTest {
        resources {
            srcDirs.add(file("src/e2eTest/resources"))
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }

}

//添加一个Test类型的Task用于运行src/apiTest/java目录下的API测试代码：
task apiTest(type: Test) {
    testClassesDirs = sourceSets.apiTest.output.classesDirs
    classpath = sourceSets.apiTest.runtimeClasspath
}
//添加一个Test类型的Task用于运行src/apiTest/java目录下的API测试代码：
//task e2eTest(type: Test) {
//    testClassesDirs = sourceSets.e2eTest.output.classesDirs
//    classpath = sourceSets.e2eTest.runtimeClasspath
//}
//ideaModule.dependsOn compileQuerydsl

//为了使Intelli IDEA能够感知到这些新添加的测试代码，我们需要对Gradle的idea插件进行额外配置：
idea {
    module {
        testSourceDirs += file('src/apiTest/java')
        testSourceDirs += file('src/apiTest/resources')

        testSourceDirs += file('src/e2eTest/java')
        testSourceDirs += file('src/e2eTest/resources')
//        sourceDirs += file('src/querydsl/java')
        scopes.TEST.plus += [configurations.apiTestCompile]
        scopes.TEST.plus += [configurations.apiTestRuntime]
    }

}
//为了使本地构建（./gradlew biuld）过程能够先运行单元测试，再运行API测试，我们还需要做以下配置：
apiTest.mustRunAfter test
build.dependsOn apiTest

//为了得到API测试的覆盖率
task jacocoApiTestReport(type: JacocoReport){
    sourceSets sourceSets.main
    executionData apiTest
}

configurations {
    apiTestCompile.extendsFrom testCompile
    apiTestRuntime.extendsFrom testRuntime
}
//看到单元测试和API测试的整体覆盖率
//task jacocoAllTestReport(type: JacocoReport){
//    sourceSets sourceSets.main
//    executionData test, apiTest
//}
//build.dependsOn jacocoAllTestReport

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootRun {
    systemProperties System.properties
}

wrapper{
    gradleVersion = '3.0'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
//    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("mysql:mysql-connector-java:5.1.48")
    compile("org.flywaydb:flyway-core")
//    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
//    compile('net.javacrumbs.shedlock:shedlock-spring:0.18.2')  //分布式锁
//    compile('net.javacrumbs.shedlock:shedlock-provider-jdbc-template:0.18.2')
//    compile('c3p0:c3p0:0.9.1.2')
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.security:spring-security-test")
//    testCompile('com.github.springtestdbunit:spring-test-dbunit:1.3.0')
//    testCompile('org.dbunit:dbunit:2.5.3')
    testCompile('com.github.database-rider:rider-spring:1.7.5'){
        exclude(group: 'org.slf4j')
    }

//    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile("io.rest-assured:spring-mock-mvc:3.0.7")
}


